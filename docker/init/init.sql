DROP DATABASE IF EXISTS BREAD_CRUMBS_DB;

CREATE DATABASE BREAD_CRUMBS_DB ;

CREATE TABLE IF NOT EXISTS BREADS (
  bread_id INT PRIMARY KEY,
  bread_name VARCHAR(255),
  price DECIMAL(10, 2),
  description TEXT,
  image_url VARCHAR(255),
  quantity_available INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS BREAD_DETAILS (
  bread_id INT PRIMARY KEY,
  ingredients TEXT,
  nutrition_facts TEXT,
  allergen_info TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (bread_id) REFERENCES BREADS(bread_id)
);

CREATE TABLE IF NOT EXISTS ORDERS (
  order_id INT PRIMARY KEY,
  user_id INT,
  total_amount DECIMAL(10, 2),
  order_status VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

CREATE TABLE IF NOT EXISTS ORDER_DETAILS (
  order_id INT,
  bread_id INT,
  quantity INT,
  price DECIMAL(10, 2),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES ORDERS(order_id),
  FOREIGN KEY (bread_id) REFERENCES BREADS(bread_id),
  PRIMARY KEY (order_id, bread_id)
);

CREATE TABLE IF NOT EXISTS USERS (
  user_id INT PRIMARY KEY,
  username VARCHAR(255),
  email VARCHAR(255),
  password VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS USER_DETAILS (
  user_id INT PRIMARY KEY,
  full_name VARCHAR(255),
  address TEXT,
  phone_number VARCHAR(20),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

CREATE OR REPLACE FUNCTION SET_MODIFIED_TIMESTAMP()
RETURNS TRIGGER AS
$$
BEGIN
    NEW.MODIFIED_TIMESTAMP = NOW();
RETURN NEW;
END;
$$
LANGUAGE PLPGSQL

DO $$
DECLARE
table_name TEXT;
  table_names TEXT[] := ARRAY{
    'BREADS'
    , 'BREAD_DETAILS'
    , 'ORDERS'
    , 'ORDER_DETAILS'
    , 'USERS'
    , 'USER_DETAILS'
  };
BEGIN
  FOREACH table_name IN ARRAY table_names
  LOOP
  EXECUTE
  'CREATE TRIGGER TRIGGER_SET_MODIFIED_TIMESTAMP
  BEFORE UPDATE ON ' || table_name ||
  ' FOR EACHE ROW
  EXECUTE PROCEDURE SET_MODIFIED_TIMESTAMP()';
  END LOOP;
END;
$$
LANGUAGE PLPGSQL
;